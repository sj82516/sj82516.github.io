<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>程式語言 on Yuanchieh&#39;s Blog</title>
		<link>https://yuanchieh.page/categories/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/</link>
		<description>Recent content in 程式語言 on yuanchieh.page</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Sun, 05 Sep 2021 01:21:40 +0000</lastBuildDate>
		
		<atom:link href="https://yuanchieh.page/categories/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>使用 InversifyJS 達到 Iversion of Control 控制反轉</title>
			<link>https://yuanchieh.page/posts/2021/2021-09-05-%E4%BD%BF%E7%94%A8-inversifyjs-%E9%81%94%E5%88%B0-iversion-of-control-%E6%8E%A7%E5%88%B6%E4%BE%9D%E8%B3%B4%E5%8F%8D%E8%BD%89/</link>
			<pubDate>Sun, 05 Sep 2021 01:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2021/2021-09-05-%E4%BD%BF%E7%94%A8-inversifyjs-%E9%81%94%E5%88%B0-iversion-of-control-%E6%8E%A7%E5%88%B6%E4%BE%9D%E8%B3%B4%E5%8F%8D%E8%BD%89/</guid>
			<description>
				
				高層次物件不應該依賴於低層次物件，例如 Controller 處理商業邏輯不應該依賴於資料庫儲存的邏輯，避免低層次物件的改動與耦合導致高層次物件需要跟著修改，透過 InversifyJS 管理 IoC
				
			</description>
		</item>
		<item>
			<title>Nodejs / Ruby / Golang 套件版本管理差異：比對 NPM 與 Bundler</title>
			<link>https://yuanchieh.page/posts/2021/2021-07-10-nodejs-%E8%88%87-ruby-%E5%A5%97%E4%BB%B6%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%AE%E7%95%B0%E6%AF%94%E5%B0%8D-npm-%E8%88%87-bundler/</link>
			<pubDate>Sat, 10 Jul 2021 01:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2021/2021-07-10-nodejs-%E8%88%87-ruby-%E5%A5%97%E4%BB%B6%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%AE%E7%95%B0%E6%AF%94%E5%B0%8D-npm-%E8%88%87-bundler/</guid>
			<description>
				
				使用套件對於一名開發者很重要，畢竟不可能一直重複造輪子，但套件的載入、版本管理不是一件這麼簡單的事，本篇比對 Nodejs 生態中的 NVM 與 Ruby 的 Gem/Bundler，看套件管理有什麼不同的方法與限制
				
			</description>
		</item>
		<item>
			<title>Youtube 直播「Fred聊聊SOLID設計原則」整理</title>
			<link>https://yuanchieh.page/posts/2021/2021-06-15-youtube-%E7%9B%B4%E6%92%ADfred%E8%81%8A%E8%81%8Asolid%E8%A8%AD%E8%A8%88%E5%8E%9F%E5%89%87%E6%95%B4%E7%90%86/</link>
			<pubDate>Tue, 15 Jun 2021 01:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2021/2021-06-15-youtube-%E7%9B%B4%E6%92%ADfred%E8%81%8A%E8%81%8Asolid%E8%A8%AD%E8%A8%88%E5%8E%9F%E5%89%87%E6%95%B4%E7%90%86/</guid>
			<description>
				
				本來抱持著聽看看的心態，但聽完覺得十分震撼，沒有想到 SOLID 應該是這樣理解的
				
			</description>
		</item>
		<item>
			<title>【Refactoring Ruby Edition】(一) 體驗重構</title>
			<link>https://yuanchieh.page/posts/2021/2021-05-01-refactoring-ruby-edition%E4%B8%80-%E9%AB%94%E9%A9%97%E9%87%8D%E6%A7%8B/</link>
			<pubDate>Sat, 01 May 2021 08:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2021/2021-05-01-refactoring-ruby-edition%E4%B8%80-%E9%AB%94%E9%A9%97%E9%87%8D%E6%A7%8B/</guid>
			<description>
				
				Refactoring Ruby Edition 系列第一篇，體驗重構的魅力
				
			</description>
		</item>
		<item>
			<title>【跨程式語言上手】Ruby 基礎教學</title>
			<link>https://yuanchieh.page/posts/2021/2021-04-02-%E8%B7%A8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%B8%8A%E6%89%8Bruby-%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/</link>
			<pubDate>Fri, 02 Apr 2021 08:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2021/2021-04-02-%E8%B7%A8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%B8%8A%E6%89%8Bruby-%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/</guid>
			<description>
				
				跨程式語言上手系列，用最短的時間上手 Ruby，包含基礎語法 / testing / api server / module 等
				
			</description>
		</item>
		<item>
			<title>Golang Test - 單元測試、Mock與http handler 測試</title>
			<link>https://yuanchieh.page/posts/2021/2021-03-18-golang-test/</link>
			<pubDate>Thu, 18 Mar 2021 08:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2021/2021-03-18-golang-test/</guid>
			<description>
				
				分享如何在 Golang 中針對 http server 寫測試，包含單元測試 / 如何針對有外部相依性的物件做 Stub / Mock，以及最後針對 http handler 的 http request 測試
				
			</description>
		</item>
		<item>
			<title>從 Nodejs 到 Golang: Concurrency 實作比較</title>
			<link>https://yuanchieh.page/posts/2021/2021-03-07-%E5%BE%9E-nodejs-%E5%88%B0-golang-concurrency-%E5%AF%A6%E4%BD%9C%E6%AF%94%E8%BC%83/</link>
			<pubDate>Sun, 07 Mar 2021 08:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2021/2021-03-07-%E5%BE%9E-nodejs-%E5%88%B0-golang-concurrency-%E5%AF%A6%E4%BD%9C%E6%AF%94%E8%BC%83/</guid>
			<description>
				
				Golang / Nodejs 試著透過有效率地使用 Kernel Thread 方式增加 Concurrency 處理能力，但兩者在實作上有不同的方式，以下將比較核心實作差異與語法上使用的不同
				
			</description>
		</item>
		
	</channel>
</rss>
