<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>演算法 on Yuanchieh&#39;s Blog</title>
		<link>https://yuanchieh.page/categories/%E6%BC%94%E7%AE%97%E6%B3%95/</link>
		<description>Recent content in 演算法 on yuanchieh.page</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Tue, 01 Dec 2020 08:21:40 +0000</lastBuildDate>
		
		<atom:link href="https://yuanchieh.page/categories/%E6%BC%94%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>UUID 原理與實作分析 - 該如何挑選適合的 UUID 版本</title>
			<link>https://yuanchieh.page/posts/2020-12-01_uuid-%E5%8E%9F%E7%90%86%E8%88%87%E5%AF%A6%E4%BD%9C%E5%88%86%E6%9E%90-%E8%A9%B2%E5%A6%82%E4%BD%95%E6%8C%91%E9%81%B8%E9%81%A9%E5%90%88%E7%9A%84-uuid-%E7%89%88%E6%9C%AC/</link>
			<pubDate>Tue, 01 Dec 2020 08:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2020-12-01_uuid-%E5%8E%9F%E7%90%86%E8%88%87%E5%AF%A6%E4%BD%9C%E5%88%86%E6%9E%90-%E8%A9%B2%E5%A6%82%E4%BD%95%E6%8C%91%E9%81%B8%E9%81%A9%E5%90%88%E7%9A%84-uuid-%E7%89%88%E6%9C%AC/</guid>
			<description>
				
				斯斯有好幾種，UUID 總共有 v1~v5，本篇將從 RFC 文件開始，並介紹 js 中 uuid 的實作方式，幫助大家找到適合的 UUID 方案
				
			</description>
		</item>
		<item>
			<title>Sketch Data Structure - Bloom Filter 介紹與實作</title>
			<link>https://yuanchieh.page/posts/2020-11-17-sketch-data-algorthm-bloom-filter-%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AF%A6%E4%BD%9C/</link>
			<pubDate>Tue, 17 Nov 2020 08:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2020-11-17-sketch-data-algorthm-bloom-filter-%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AF%A6%E4%BD%9C/</guid>
			<description>
				
				犧牲部分準確性，Bloom Filter 用少量的記憶體與 O(1) 的查詢時間回答「某值是否曾經出現過」的問題
				
			</description>
		</item>
		<item>
			<title>Raft 演算法介紹與《In Search of an Understandable Consensus Algorithm》摘要</title>
			<link>https://yuanchieh.page/posts/2020-11-03_raft-%E6%BC%94%E7%AE%97%E6%B3%95%E4%BB%8B%E7%B4%B9/</link>
			<pubDate>Tue, 03 Nov 2020 08:21:40 +0000</pubDate>
			
			<guid>https://yuanchieh.page/posts/2020-11-03_raft-%E6%BC%94%E7%AE%97%E6%B3%95%E4%BB%8B%E7%B4%B9/</guid>
			<description>
				
				Raft 演算法是一種 Consensus 演算法，提供分散式系統中可容錯的「強一致性」資料同步的方式，意圖取代複雜難懂的 Paxos，主要由三個機制 Leader / Log Replication / Safety 三塊組成
				
			</description>
		</item>
		
	</channel>
</rss>
